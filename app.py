import streamlit as st
import pandas as pd
import requests
import docx
import os

# Configurar HuggingFace API
huggingface_token = os.getenv("HF_TOKEN")
model_url = "https://api-inference.huggingface.co/models/tiiuae/falcon-7b-instruct"

headers = {
    "Authorization": f"Bearer {huggingface_token}",
    "Content-Type": "application/json"
}

# Fun√ß√£o para extrair texto de DOCX
def extract_text_from_docx(file):
    doc = docx.Document(file)
    return "\n".join([p.text for p in doc.paragraphs])

# Fun√ß√£o para gerar p√∫blicos
def gerar_publicos(texto):
    prompt = f"""
Voc√™ √© um especialista em Marketing Digital e Meta Ads.

Com base nesse briefing de cliente:

\"\"\"{texto}\"\"\"

Gere 4 sugest√µes de p√∫blicos para campanha de convers√£o:

- P√∫blico 1: Misturando Interesses + Cargos + Comportamentos
- P√∫blico 2: S√≥ Interesses
- P√∫blico 3: S√≥ Cargos
- P√∫blico 4: S√≥ Comportamentos

Formatar a resposta usando Markdown para facilitar a leitura.

Importante: Seja estrat√©gico, escolha segmenta√ß√µes que combinam com a persona do briefing.
    """

    payload = {
        "inputs": prompt,
        "parameters": {"max_new_tokens": 800}
    }
    response = requests.post(model_url, headers=headers, json=payload)
    resposta = response.json()

    if isinstance(resposta, list) and "generated_text" in resposta[0]:
        return resposta[0]["generated_text"]
    else:
        raise Exception(f"Erro inesperado: {resposta}")

# Streamlit App
st.set_page_config(page_title="Segmentador de P√∫blico Meta Ads com IA", layout="wide")
st.title("üéØ Segmentador de P√∫blico Meta Ads com IA")
st.caption("Fa√ßa upload do briefing do cliente (.txt ou .docx)")

uploaded_file = st.file_uploader("Drag and drop file here", type=["txt", "docx"])

if uploaded_file:
    if uploaded_file.name.endswith(".txt"):
        briefing_texto = uploaded_file.read().decode("utf-8")
    elif uploaded_file.name.endswith(".docx"):
        briefing_texto = extract_text_from_docx(uploaded_file)
    else:
        st.error("Formato de arquivo n√£o suportado.")
        st.stop()

    try:
        with st.spinner("Carregando e gerando p√∫blicos..."):
            publicos_gerados = gerar_publicos(briefing_texto)
        st.success("P√∫blicos gerados com sucesso!")
        st.markdown(publicos_gerados)
    except Exception as e:
        st.error(f"Erro ao gerar p√∫blicos: {str(e)}")
